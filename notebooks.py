# -*- coding: utf-8 -*-
"""notebooks_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u7lU778QwVAecPM7CLqQP8F71On2xClj
"""

import numpy as np
from matplotlib import pyplot as plt
from scipy import integrate
from matplotlib import pyplot as plt
N = np.linspace(0,1,100)
K = 1; 
r = 2;
s = 0.5; 
G = r*N*(1-(N/K)**s);
# function to show the plot


# giving a title to my graph
plt.title('My first graph!')
plt.plot(N,G);
# naming the x axis
plt.xlabel('N')
# naming the y axis
plt.ylabel('G(N)')
plt.show()

import numpy as np
from matplotlib import pyplot as plt
from scipy import integrate
from matplotlib import pyplot as plt
N = np.linspace(0,1,100)
K = 1; 
r = 2;
s1 = 0.5;
s2= 1;
s3=2
G1 = r*N*(1-(N/K)**(s1));
G2 = r*N*(1-(N/K)**(s2));
G3 = r*N*(1-(N/K)**(s3));
# function to show the plot
plt.plot(N,G1, label="s=.5");
plt.plot(N,G2,label="s=1");
plt.plot(N,G3,label="s=2");
#Legend position
plt.legend(loc="upper right")
# giving a title to my graph
plt.title('My first graph!')
# naming the x axis
plt.xlabel('N')
# naming the y axis
plt.ylabel('G(N)')
plt.show()

a=np.linspace(0,2,101)
print(a)
s1=0.1
s2=1
s3=10
n1=(1 - a)**(1/(s1))
n2=(1 - a)**(1/(s2))
n3=(1 - a)**(1/(s3))
# function to show the plot
plt.plot(a,n1, label="s=.1");
plt.plot(a,n2,label="s=1");
plt.plot(a,n3,label="s=10");
#Legend position
plt.legend(loc="upper right")
# giving a title to my graph
plt.title('My 2nd graph!')
# naming the x axis
plt.xlabel('a(E)')
#axis
plt.axhline(y=0, color='k')
plt.axvline(x=0, color='k')
# naming the y axis
plt.ylabel('n1*')
plt.show()

u = np.linspace(0,2,100)
for a in (0.1,0.5,1,1.5,2):
    for s in range(0,10):
        F = u*(1 - u**s) - a*u
        plt.plot(u,F, label=s,)
    #Legend position
    plt.legend(loc="upper right")
    #limiting y axis
    plt.ylim([-2,2])
    # giving a title to my graph
    plt.title(a)
    #axis
    plt.axhline(y=0, color='k')
    plt.axvline(x=0, color='k')
    # naming the x axis
    plt.xlabel('u')
    # naming the y axis
    plt.ylabel('u prime')
    plt.show()

u = np.linspace(0,2,100)
for s in (0,0.5,1,1.5,2):
    for a in range(-10,10):
        F = u*(1 - u**s) - a*u
        plt.plot(u,F, label=a,)
    #Legend position
    plt.legend(loc="lower left")
    #limiting y axis
    plt.ylim([-20,20])
    # giving a title to my graph
    plt.title(s)
    #axis
    plt.axhline(y=0, color='k')
    plt.axvline(x=0, color='k')
    # naming the x axis
    plt.xlabel('u')
    # naming the y axis
    plt.ylabel('u prime')
    plt.show()

"""Qn 4)d)**bold text**"""

import numpy as np
from matplotlib import pyplot as plt
from scipy import integrate
from matplotlib import pyplot as plt
N=100

# param

B=2
d=3
T=1

#in cond

t=np.linspace(0,T,N)
u01=[1]*N
u02=[5]*N
u03=[10]*N

#ini with const value

u1=[u01]
u2=[u02]
u3=[u03]
tau=[]

#no of intervals of length T to plot
n=5

# define fn for calc u
def du(x,y):
  return (B*y)/((d**T-1)*y+d**T)-x*(1+x)

#gen values of u
for i in range(n):
  tau.append([k+i*T for k in t])
  newu1=[u1[i][N-1]]
  newu2=[u2[i][N-1]]
  newu3=[u3[i][N-1]]
  for j in range(N-1):
    nextu1=newu1[j]+t[1]*du(newu1[j],u1[i][j])
    newu1.append(nextu1)
    nextu2=newu2[j]+t[1]*du(newu2[j],u1[i][j])
    newu2.append(nextu2)
    nextu3=newu3[j]+t[1]*du(newu3[j],u3[i][j])
    newu3.append(nextu3)
  u1.append(newu1)
  u2.append(newu2)
  u3.append(newu3)
fig, ax = plt.subplots()

plt.plot(tau[0],u1[1],color='blue',label="u(0)=1")
plt.plot(tau[0],u2[1],color='green',label="u(0)=5")
plt.plot(tau[0],u3[1],color='red',label="u(0)=10")

plt.xlabel("$\u03C4$")
plt.ylabel("$u(\u03C4)$")
plt.legend(loc="upper right")
ax.grid(True, which="both")
ax.axhline(y=0, color='k')
ax.axhline(y=0, color='k')

plt.show()

